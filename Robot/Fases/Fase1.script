def Fase1():
  set_gravity([0.0, 0.0, 9.82])
  step_count_25da699f_e1af_43de_b568_653f16c13e92 = 0.0
  thread Step_Counter_Thread_310103ff_a7a7_40d4_aec1_b4e2b176c9c4():
    while (True):
      step_count_25da699f_e1af_43de_b568_653f16c13e92 = step_count_25da699f_e1af_43de_b568_653f16c13e92 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_310103ff_a7a7_40d4_aec1_b4e2b176c9c4()
  set_safety_mode_transition_hardness(1)
  set_tcp(p[0.00755148296704608,0.003639298738154023,0.026409592411711,0.0,0.0,0.0])
  set_payload(1.14, [0.022, -0.007, 0.054])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(True, 1000000, 2, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  global Mesa=p[-0.3283222416297581,-0.20095078680444134,-0.01154506462095492,-2.1087277613487028,-2.3273776320839428,-7.166709239352482E-4]
  # begin: URCap Installation Node
  #   Source: Remote TCP & Toolpath, 1.2.65.build36, Universal Robots A/S
  #   Type: Remote TCP & Toolpath
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: OnRobot, 5.1.6, OnRobot A/S
  #   Type: Configuración de OnRobot
  on_robot_type = 3
  on_robot_cycle = 2.0
  on_device_ip = "localhost"
  on_device_socket_port = 51234
  on_xmlrpc = rpc_factory("xmlrpc", "http://localhost:41414")
  on_RPC = rpc_factory("xmlrpc", "http://127.0.0.1:31416")
  ON_DEBUG_LOG = False
  on_isMetric = True
  on_toolConnector = True
  on_ioqc = False
  on_dual = False
  on_ft = False
  on_hex = False
  on_gecko = 0
  on_gripper = [False, False, False]
  #======    OnRobot Globals    ======#
  
  ON_MATH_PI=3.141593
  ON_ZEROPOSE=p[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZEROFRAME=p[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZERO3D=[0.0,0.0,0.0]
  ON_ZERO6D=[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZERO8D=[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
  ON_FALSE3D=[False,False,False]
  ON_FALSE6D=[False,False,False,False,False,False]
  ON_FALSE8D=[False,False,False,False,False,False,False,False]
  global on_return=0
  on_speedL=ON_ZERO6D
  on_speedBase=ON_ZERO6D
  on_speedVect=ON_ZERO6D
  on_speedExtra=ON_ZERO6D
  on_speedDC=ON_ZERO6D
  on_speedGecko=ON_ZERO6D
  on_floatRegShift=24
  on_intRegShift=24
  on_boolRegShift=64
  ON_BASE_SHIFT_FLOAT=24
  ON_BASE_SHIFT_INT=24
  ON_BASE_SHIFT_BOOL=64
  ON_DEVICE_SHIFT_FLOAT=3
  ON_DEVICE_SHIFT_INT=2
  ON_DEVICE_SHIFT_BOOL=7
  ON_COMMON_SHIFT_FLOAT=12
  ON_COMMON_SHIFT_INT=3
  ON_COMMON_SHIFT_BOOL=1
  ON_DI_SINGLE=0
  ON_DI_PRIMARY=1
  ON_DI_SECONDARY=2
  ON_DI_DUAL=3
  ON_DEVICE_ID_MISSING=0
  ON_INIT_TIMEOUT=500
  on_robot_TCP_offset=ON_ZEROFRAME
  on_tcp_offset_actual=ON_ZEROFRAME
  on_cog_actual=ON_ZEROFRAME
  on_mass_actual=0.0
  on_robot_mount=[0.0,0.0]
  
  #======    End of OnRobot Globals    ======#
  #======    OnRobot Interface Messages    ======#
  
  on_devices_primary_log="Dispositivos de OnRobot"
  on_devices_secondary_log="Dispositivo secundario de OnRobot"
  on_device_error_title="OnRobot - Error de dispositivo"
  on_install_error="La configuración de OnRobot no es correcta.<br>Compruebe el estado en la página de configuración de OnRobot, en la pestaña de instalación.<br>Programa detenido."
  on_device_missing="No hay ningún dispositivo conectado.<br>Programa detenido."
  ft_device_missing="No hay ningún sensor F/T OnRobot conectado.<br>Programa detenido."
  rg2ft_device_missing="No hay ninguna pinza RG2-FT conectada.<br>Programa detenido."
  rg_device_missing="No hay ninguna pinza RG conectada.<br>Programa detenido."
  vg_device_missing="No hay ninguna pinza VG conectada.<br>Programa detenido."
  gg_device_missing="No hay ninguna Gecko Gripper conectada.<br>Programa detenido."
  sg_device_missing="No hay ninguna Soft Gripper conectada.<br>Programa detenido."
  tfg_device_missing="No hay ninguna pinza 3FG conectada.<br>Programa detenido."
  on_xmlrpc_start_ip="Conexión al servidor XML-RPC de OnRobot:"
  on_java_comm_error_textmsg_title="OnRobot - Error de comunicación:"
  on_java_comm_controlsocket_open_error="Apertura de la toma 'javaSocket' incorrecta."
  on_java_comm_error_title="OnRobot - Error de comunicación"
  on_java_comm_socket_open_error="El establecimiento de la conexión con el URCap ha excedido el tiempo.<br>Compruebe el estado en la página de configuración de OnRobot, en la pestaña de instalación.<br>Programa detenido."
  on_rtde_feed_error_textmsg_title="OnRobot - Error de comunicación:"
  on_rtde_feed_open_error_textmsg="Apertura de la toma 'rtdeFeed' incorrecta."
  on_rtde_feed_error_title="OnRobot - Error de comunicación"
  on_rtde_feed_open_error="El establecimiento de la conexión con los dispositivos ha excedido el tiempo.<br>Asegúrese de que los dispositivos de OnRobot funcionen y compruebe el estado en la página de configuración de OnRobot, en la pestaña de instalación."
  
  #======    End of OnRobot Interface Messages    ======#
  #======    OnRobot Interface    ======#
  
  on_portopened_javaSocket=False
  on_rtde_feed_opened=False
  on_dataRead_running=False
  FT_SENSOR_ID_UNDEFINED=0
  FT_SENSOR_ID_UNKNOWN=1
  FT_SENSOR_ID_HEX_V1=11
  FT_SENSOR_ID_HEX_V2=12
  FT_SENSOR_ID_HEX_V3=13
  FT_SENSOR_ID_RG2FT_V0=20
  FT_SENSOR_ID_RG2FT_V1=21
  FT_SENSOR_ID_RG2FT_V2=22
  def on_error(status_flag,message,title,stop_var=False):
  if(status_flag):
  popup(message,title=title,error=True,blocking=False)
  stop_var=True
  end 
  return stop_var
  end 
  def on_warning(status_flag,message,title):
  if(status_flag):
  textmsg(title,message)
  end 
  end 
  def on_missing():
  popup(on_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def ft_missing():
  popup(ft_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def rg2ft_missing():
  popup(rg2ft_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def rg_missing():
  popup(rg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def vg_missing():
  popup(vg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def gg_missing():
  popup(gg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def sg_missing():
  popup(sg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def tfg_missing():
  popup(tfg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def on_portclose_javaSocket():
  socket_close("javaSocket")
  on_portopened_javaSocket=False
  end 
  def on_portopen_javaSocket():
  on_portclose_javaSocket()
  on_portopened_javaSocket=socket_open("127.0.0.1",44005,"javaSocket")
  if not on_portopened_javaSocket:
  textmsg(on_java_comm_error_textmsg_title,on_java_comm_controlsocket_open_error)
  popup(on_java_comm_socket_open_error,title=on_java_comm_error_title,error=True,blocking=False)
  halt
  end 
  end 
  def on_rtde_feed_close():
  socket_close("rtdeFeed")
  on_rtde_feed_opened=False
  end 
  def on_rtde_feed_open():
  on_rtde_feed_close()
  on_rtde_feed_opened=socket_open(on_device_ip,on_device_socket_port,"rtdeFeed")
  if not on_rtde_feed_opened:
  on_rtde_feed_opened=socket_open(on_device_ip,on_device_socket_port,"rtdeFeed")
  end 
  if not on_rtde_feed_opened:
  textmsg(on_rtde_feed_error_textmsg_title,on_rtde_feed_open_error_textmsg)
  popup(on_rtde_feed_open_error,title=on_rtde_feed_error_title,error=True,blocking=False)
  halt
  end 
  end 
  def on_dataRead():
  enter_critical
  floatRegDummy=read_input_float_register(0+on_floatRegShift)
  on_speedVect[0]=floatRegDummy/1000.0 
  floatRegDummy=read_input_float_register(1+on_floatRegShift)
  on_speedVect[1]=floatRegDummy/1000.0 
  floatRegDummy=read_input_float_register(2+on_floatRegShift)
  on_speedVect[2]=floatRegDummy/1000.0 
  floatRegDummy=read_input_float_register(3+on_floatRegShift)
  on_speedVect[3]=floatRegDummy
  floatRegDummy=read_input_float_register(4+on_floatRegShift)
  on_speedVect[4]=floatRegDummy
  floatRegDummy=read_input_float_register(5+on_floatRegShift)
  on_speedVect[5]=floatRegDummy
  exit_critical
  end 
  def on_set_rtde_watchdog(updateHz=5,ftWD=False,gripperWD=-1):
  local update_str=str_cat(" watchdog set to [Hz]: ",updateHz)
  if ftWD:
  watchdog_int_reg_str=str_cat("input_int_register_",0+on_intRegShift)
  rtde_set_watchdog(watchdog_int_reg_str,updateHz,"stop")
  if ON_DEBUG_LOG:
  textmsg(watchdog_int_reg_str,update_str)
  end 
  end 
  if not(gripperWD<0):
  if(gripperWD==ON_DI_SINGLE or gripperWD==ON_DI_PRIMARY or gripperWD==ON_DI_DUAL):
  watchdog_int_reg_str=str_cat("input_int_register_",3+on_intRegShift)
  rtde_set_watchdog(watchdog_int_reg_str,updateHz,"stop")
  if ON_DEBUG_LOG:
  textmsg(watchdog_int_reg_str,update_str)
  end 
  end 
  if(gripperWD==ON_DI_SECONDARY or gripperWD==ON_DI_DUAL):
  watchdog_int_reg_str=str_cat("input_int_register_",ON_DEVICE_SHIFT_INT+3+on_intRegShift)
  rtde_set_watchdog(watchdog_int_reg_str,updateHz,"stop")
  if ON_DEBUG_LOG:
  textmsg(watchdog_int_reg_str,update_str)
  end 
  end 
  end 
  end 
  def on_speedVect_get():
  return[on_speedVect[0],on_speedVect[1],on_speedVect[2],on_speedVect[3],on_speedVect[4],on_speedVect[5]]
  end 
  def on_speedDC_get():
  local speedExtra=ON_ZERO6D
  if on_speedl_for_depthcompensation:
  speedExtra=[on_speedDC[0],on_speedDC[1],on_speedDC[2],on_speedDC[3],on_speedDC[4],on_speedDC[5]]
  end 
  return speedExtra
  end 
  def on_speedDC_set(speedDC):
  on_speedDC=[speedDC[0],speedDC[1],speedDC[2],speedDC[3],speedDC[4],speedDC[5]]
  end 
  def on_speedGecko_get():
  local speedExtra=ON_ZERO6D
  if on_speedl_for_gecko:
  speedExtra=[on_speedGecko[0],on_speedGecko[1],on_speedGecko[2],on_speedGecko[3],on_speedGecko[4],on_speedGecko[5]]
  end 
  return speedExtra
  end 
  def on_speedGecko_set(speedGecko):
  on_speedGecko=[speedGecko[0],speedGecko[1],speedGecko[2],speedGecko[3],speedGecko[4],speedGecko[5]]
  end 
  thread on_dataRead_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting on_dataRead thread")
  end 
  while on_dataRead_running:
  sync()
  on_dataRead()
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping on_dataRead thread")
  end 
  end 
  
  #======    End of OnRobot Interface    ======#
  #======    OnRobot QC Setup Tool Connector    ======#
  
  def tc_setup_tool():
  if ON_DEBUG_LOG:
  textmsg("QC Setup Tool Connector start...")
  end 
  set_tool_voltage(24)
  
  set_tool_communication(True,1000000,2,1,1.5,3.5)
  
  if ON_DEBUG_LOG:
  textmsg("QC Setup Tool Connector end.")
  end 
  end 
  
  #======    End of OnRobot QC Setup Tool Connector    ======#
  #======    OnRobot TCP Messages    ======#
  
  on_tcp_log_msg_default="OnRobot: Desplazamiento del TCP del robot establecido en:"
  on_tcp_log_msg_primary="OnRobot: Desplazamiento del TCP del robot establecido en primario:"
  on_tcp_log_msg_secondary="OnRobot: Desplazamiento del TCP del robot establecido en secundario:"
  
  #======    End of OnRobot TCP Messages    ======#
  #======    OnRobot TCP    ======#
  
  on_tcp_offset_actual=ON_ZEROFRAME
  on_tcp_offset_primary=ON_ZEROFRAME
  on_tcp_static_primary=ON_ZEROFRAME
  on_tcp_dynamic_primary=ON_ZEROFRAME
  on_tcp_vision_primary=ON_ZEROFRAME
  on_tcp_qc_primary=ON_ZEROFRAME
  on_tcp_base_primary=ON_ZEROFRAME
  on_tcp_gripper_static_primary=ON_ZEROFRAME
  on_tcp_tool_primary=ON_ZEROFRAME
  on_tcp_gripper_dynamic_primary=ON_ZEROFRAME
  on_tcp_gripper_primary=ON_ZEROFRAME
  on_tcp_offset_secondary=ON_ZEROFRAME
  on_tcp_static_secondary=ON_ZEROFRAME
  on_tcp_dynamic_secondary=ON_ZEROFRAME
  on_tcp_vision_secondary=ON_ZEROFRAME
  on_tcp_qc_secondary=ON_ZEROFRAME
  on_tcp_base_secondary=ON_ZEROFRAME
  on_tcp_gripper_static_secondary=ON_ZEROFRAME
  on_tcp_tool_secondary=ON_ZEROFRAME
  on_tcp_gripper_dynamic_secondary=ON_ZEROFRAME
  on_tcp_gripper_secondary=ON_ZEROFRAME
  def on_tcp_update_primary():
  if ON_DEBUG_LOG:
  textmsg("TCP Update Primary start..")
  end 
  on_tcp_gripper_dynamic_primary=p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  enter_critical
  on_tcp_dynamic_primary=pose_trans(on_tcp_static_primary,on_tcp_gripper_dynamic_primary)
  on_tcp_offset_primary=pose_trans(on_tcp_dynamic_primary,on_tcp_tool_primary)
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("TCP Update Primary end.")
  end 
  end 
  def on_tcp_init_primary():
  if ON_DEBUG_LOG:
  textmsg("TCP Init Primary start..")
  end 
  enter_critical
  on_tcp_base_primary=pose_trans(on_tcp_vision_primary,on_tcp_qc_primary)
  on_tcp_static_primary=pose_trans(on_tcp_base_primary,on_tcp_gripper_static_primary)
  exit_critical
  on_tcp_update_primary()
  if ON_DEBUG_LOG:
  textmsg("TCP Init Primary end.")
  end 
  end 
  def on_tcp_offset_set(TCP_offset):
  if ON_DEBUG_LOG:
  textmsg("TCP Offset set started!")
  end 
  on_tcp_offset_send(TCP_offset)
  if(on_follow_tcp):
  set_tcp(TCP_offset)
  end 
  on_robot_TCP_offset=TCP_offset
  if ON_DEBUG_LOG:
  textmsg("TCP Offset set to: ",on_robot_TCP_offset)
  end 
  end 
  def on_tcp_offset_forced_set_actual(isPrimary=True):
  if(not on_follow_tcp):
  
  local tcp_log_msg=on_tcp_log_msg_default
  
  textmsg(tcp_log_msg,on_tcp_offset_actual)
  set_tcp(on_tcp_offset_actual)
  end 
  end 
  def on_tcp_update(isPrimary=True):
  on_tcp_update_primary()
  
  on_tcp_set_actual_to(isPrimary)
  end 
  def on_tcp_set_actual_to(isPrimary=True):
  
  on_tcp_offset_actual=on_tcp_offset_primary
  if(on_follow_tcp):
  textmsg(on_tcp_log_msg_default,on_tcp_offset_actual)
  end 
  
  on_tcp_active_is_primary=isPrimary
  on_tcp_offset_set(on_tcp_offset_actual)
  end 
  def on_tcp_update_tool_primary(tool_offset):
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool Primary start..")
  end 
  on_tcp_tool_primary=tool_offset
  on_tcp_update_primary()
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool Primary end.")
  end 
  end 
  def on_tcp_tool_rpy_get(xyz=[0.0,0.0,0.0],rpy=[0.0,0.0,0.0]):
  local rotvec=rpy2rotvec(rpy)
  local tool_offset=p[xyz[0],xyz[1],xyz[2],rotvec[0],rotvec[1],rotvec[2]]
  return tool_offset
  end 
  
  def on_tcp_update_tool(tool_offset,tool_index=0):
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool start..")
  end 
  if(tool_index!=ON_DI_SECONDARY):
  on_tcp_update_tool_primary(tool_offset)
  local isPrimary=True
  
  end 
  on_tcp_set_actual_to(isPrimary)
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool end.")
  end 
  end 
  
  #======    End of OnRobot TCP    ======#
  #======    OnRobot Payload Messages    ======#
  
  on_mass_log_msg="OnRobot: Masa de la carga útil del robot establecida en:"
  on_cog_log_msg="OnRobot: Centro de gravedad de la carga útil del robot establecido en:"
  
  #======    End of OnRobot Payload Messages    ======#
  #======    OnRobot Payload    ======#
  
  on_cog_actual=ON_ZEROFRAME
  on_mass_actual=0.0
  on_cog_primary=ON_ZEROFRAME
  on_cog_L1L2_primary=ON_ZEROFRAME
  on_mass_primary=0.0
  on_mass_L1L2_primary=0.0
  on_cog_vision_primary=ON_ZEROFRAME
  on_cog_qc_primary=ON_ZEROFRAME
  on_cog_base_primary=ON_ZEROFRAME
  on_cog_gripper_primary=ON_ZEROFRAME
  on_cog_tool_primary=ON_ZEROFRAME
  on_mass_vision_primary=0.0
  on_mass_qc_primary=0.0
  on_mass_base_primary=0.0
  on_mass_gripper_primary=0.0
  on_mass_tool_primary=0.0
  on_cog_secondary=ON_ZEROFRAME
  on_mass_secondary=0.0
  on_cog_gripper_secondary=ON_ZEROFRAME
  on_mass_gripper_secondary=0.0
  on_cog_tool_secondary=ON_ZEROFRAME
  on_mass_tool_secondary=0.0
  ON_LB2KG001=0.45359237/100
  def on_payload_update_primary():
  if ON_DEBUG_LOG:
  textmsg("Payload Update Primary start..")
  end 
  enter_critical
  on_mass_primary=on_mass_L1L2_primary+on_mass_tool_primary
  local massL1L2L3Ratio=on_mass_tool_primary/on_mass_primary
  local toolAbsCOG=pose_trans(on_tcp_dynamic_primary,on_cog_tool_primary)
  toolAbsCOG=p[toolAbsCOG[0],toolAbsCOG[1],toolAbsCOG[2],0.0,0.0,0.0]
  on_cog_primary=interpolate_pose(on_cog_L1L2_primary,toolAbsCOG,massL1L2L3Ratio)
  on_cog_primary=p[on_cog_primary[0],on_cog_primary[1],on_cog_primary[2],0.0,0.0,0.0]
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("Payload Update Primary end.")
  end 
  end 
  def on_payload_init_primary():
  if ON_DEBUG_LOG:
  textmsg("Payload Init Primary start..")
  end 
  enter_critical
  on_mass_base_primary=on_mass_vision_primary+on_mass_qc_primary
  local massL0L1Ratio=on_mass_qc_primary/on_mass_base_primary
  on_mass_L1L2_primary=on_mass_base_primary+on_mass_gripper_primary
  local massL1L2Ratio=on_mass_gripper_primary/on_mass_L1L2_primary
  local qcAbsCOG=pose_trans(on_tcp_vision_primary,on_cog_qc_primary)
  qcAbsCOG=p[qcAbsCOG[0],qcAbsCOG[1],qcAbsCOG[2],0.0,0.0,0.0]
  on_cog_base_primary=interpolate_pose(on_cog_vision_primary,qcAbsCOG,massL0L1Ratio)
  on_cog_base_primary=p[on_cog_base_primary[0],on_cog_base_primary[1],on_cog_base_primary[2],0.0,0.0,0.0]
  local gripperAbsCOG=pose_trans(on_tcp_base_primary,on_cog_gripper_primary)
  gripperAbsCOG=p[gripperAbsCOG[0],gripperAbsCOG[1],gripperAbsCOG[2],0.0,0.0,0.0]
  on_cog_L1L2_primary=interpolate_pose(on_cog_base_primary,gripperAbsCOG,massL1L2Ratio)
  on_cog_L1L2_primary=p[on_cog_L1L2_primary[0],on_cog_L1L2_primary[1],on_cog_L1L2_primary[2],0.0,0.0,0.0]
  exit_critical
  on_payload_update_primary()
  if ON_DEBUG_LOG:
  textmsg("Payload Init Primary end.")
  end 
  end 
  def on_payload_update():
  on_payload_update_primary()
  
  on_mass_actual =on_mass_primary
  on_cog_actual=on_cog_primary
  
  on_payload_set_actual()
  end 
  def on_payload_set_actual():
  
  on_mass_actual =on_mass_primary
  on_cog_actual=on_cog_primary
  
  local CoG=[on_cog_actual[0],on_cog_actual[1],on_cog_actual[2]]
  on_payload_set(on_mass_actual,CoG)
  end 
  def on_payload_update_tool_primary(tool_mass=0,tool_cog=[0.0,0.0,0.0]):
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool Primary start..")
  end 
  on_cog_tool_primary=p[tool_cog[0],tool_cog[1],tool_cog[2],0.0,0.0,0.0]
  on_mass_tool_primary=tool_mass
  on_payload_update_primary()
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool Primary end.")
  end 
  end 
  def on_payload_set(mass,CoG):
  if ON_DEBUG_LOG:
  textmsg("Payload set started!")
  end 
  local center_of_gravity=[CoG[0],CoG[1],CoG[2]]
  on_payload_send(center_of_gravity,mass)
  if(on_isMetric):
  local roundedMass=floor(mass*100+0.5)/100
  else:
  local roundedMass=floor(mass/ON_LB2KG001+0.5)*ON_LB2KG001
  end 
  set_payload(roundedMass,center_of_gravity)
  on_mass_actual=roundedMass
  on_cog_actual=p[CoG[0],CoG[1],CoG[2],0.0,0.0,0.0]
  if ON_DEBUG_LOG:
  textmsg("Payload mass, CoG set to: ",str_cat(str_cat(mass,", "),CoG))
  end 
  end 
  
  def on_payload_update_secondary():
  end 
  def on_payload_init_secondary():
  end 
  
  def on_payload_update_tool(tool_mass,tool_cog=[0.0,0.0,0.0],tool_index=0):
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool start..")
  end 
  if(tool_index!=ON_DI_SECONDARY):
  on_cog_tool_primary=p[tool_cog[0],tool_cog[1],tool_cog[2],0.0,0.0,0.0]
  on_mass_tool_primary=tool_mass
  else:
  on_cog_tool_secondary=p[tool_cog[0],tool_cog[1],tool_cog[2],0.0,0.0,0.0]
  on_mass_tool_secondary=tool_mass
  end 
  on_payload_update()
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool end.")
  end 
  end 
  def on_payload_get_cog2tcp_tool(tool_index=0):
  if(tool_index!=ON_DI_SECONDARY):
  local cog_tool=[on_tcp_tool_primary[0],on_tcp_tool_primary[1],on_tcp_tool_primary[2]]
  else:
  local cog_tool=[on_tcp_tool_secondary[0],on_tcp_tool_secondary[1],on_tcp_tool_secondary[2]]
  end 
  return cog_tool
  end 
  
  #======    End of OnRobot Payload    ======#
  #======    OnRobot QC TCP    ======#
  
  onrobotmini=0
  
  def on_tcp_offset_send(TCP_offset):
  on_robot_TCP_offset=TCP_offset
  end 
  def on_payload_send(CoG,mass):
  on_robot_payload_cog=CoG
  on_robot_payload_mass=mass
  end 
  
  
  #======    End of OnRobot QC TCP    ======#
  #======    OnRobot  Speedl    ======#
  
  on_speedl_thread_handler=0
  on_speedl_is_enabled=False
  on_speedl_is_running=False
  on_speedl_acc=0.0
  ft_speedl_hg_caranteen_reached=False
  ft_speedl_hg_caranteen_safemode=False
  on_speedl_for_ftcontrol=False
  on_speedl_for_move=False
  on_speedl_for_handguide=False
  on_speedl_for_insertpart=False
  on_speedl_for_depthcompensation=False
  on_speedl_for_center=False
  on_speedl_for_gecko=False
  on_speedl_acc=10000.0 
  on_speedl_acc_to_zero=3.0 
  ON_SPEEDL_FTCONTROL=1
  ON_SPEEDL_HANDGUIDE=2
  ON_SPEEDL_MOVE=3
  ON_SPEEDL_INSERTPART=4
  ON_SPEEDL_DEPTHCOMP=5
  ON_SPEEDL_CENTER=6
  ON_SPEEDL_GECKO=7
  def on_speedl_add_extra(speedBase,speedExtra):
  speedSum=ON_ZERO6D
  speedBaseP=p[speedBase[0],speedBase[1],speedBase[2],speedBase[3],speedBase[4],speedBase[5]]
  speedExtraP=p[speedExtra[0],speedExtra[1],speedExtra[2],speedExtra[3],speedExtra[4],speedExtra[5]]
  speedSumP=pose_add(speedExtraP,speedBaseP)
  speedSum=[speedSumP[0],speedSumP[1],speedSumP[2],speedSumP[3],speedSumP[4],speedSumP[5]]
  return speedSum
  end 
  
  thread on_speedl_thread():
  if ON_DEBUG_LOG:
  textmsg("Speedl thread started..")
  end 
  enter_critical
  on_speedl_is_running=True
  on_speedl_is_enabled=True
  exit_critical
  on_speedL=ON_ZERO6D
  
  while on_speedl_is_running:
  on_speedBase=on_speedVect_get()
  on_speedL=on_speedBase
  
  
  
  if on_speedl_is_enabled:
  speedl(on_speedL,a=on_speedl_acc,t=0.001)
  else:
  speedl(ON_ZERO6D,a=on_speedl_acc_to_zero,t=0.001)
  end 
  end 
  
  on_speedL=ON_ZERO6D
  if ON_DEBUG_LOG:
  textmsg("Speedl thread ended.")
  end 
  end 
  def on_speedl_integer_get():
  local speedl_integer=binary_list_to_integer([on_speedl_for_ftcontrol,on_speedl_for_handguide,on_speedl_for_move,on_speedl_for_insertpart,on_speedl_for_depthcompensation,on_speedl_for_center,on_speedl_for_gecko])
  return speedl_integer
  end 
  def on_speedl_start_for(speedl_id):
  if(speedl_id==ON_SPEEDL_FTCONTROL):
  on_speedl_for_ftcontrol=True
  elif(speedl_id==ON_SPEEDL_HANDGUIDE):
  on_speedl_for_handguide=True
  elif(speedl_id==ON_SPEEDL_MOVE):
  on_speedl_for_move=True
  elif(speedl_id==ON_SPEEDL_INSERTPART):
  on_speedl_for_insertpart=True
  elif(speedl_id==ON_SPEEDL_DEPTHCOMP):
  on_speedl_for_depthcompensation=True
  elif(speedl_id==ON_SPEEDL_CENTER):
  on_speedl_for_center=True
  elif(speedl_id==ON_SPEEDL_GECKO):
  on_speedl_for_gecko=True
  else:
  textmsg("Unknown Start speedl ID received: ",speedl_id)
  end 
  local speedl_integer=on_speedl_integer_get()
  if not(speedl_integer==0):
  if not on_speedl_is_running:
  on_speedl_thread_handler=run on_speedl_thread()
  end 
  end 
  return on_speedl_is_running
  end 
  def on_speedl_stop_for(speedl_id,brake=10):
  if(speedl_id==ON_SPEEDL_FTCONTROL):
  on_speedl_for_ftcontrol=False
  elif(speedl_id==ON_SPEEDL_HANDGUIDE):
  on_speedl_for_handguide=False
  elif(speedl_id==ON_SPEEDL_MOVE):
  on_speedl_for_move=False
  elif(speedl_id==ON_SPEEDL_INSERTPART):
  on_speedl_for_insertpart=False
  elif(speedl_id==ON_SPEEDL_DEPTHCOMP):
  on_speedl_for_depthcompensation=False
  on_speedDC_set(ON_ZERO6D)
  elif(speedl_id==ON_SPEEDL_CENTER):
  on_speedl_for_center=False
  elif(speedl_id==ON_SPEEDL_GECKO):
  on_speedl_for_gecko=False
  on_speedGecko_set(ON_ZERO6D)
  else:
  textmsg("Unknown Stop speedl ID received: ",speedl_id)
  end 
  local speedl_integer=on_speedl_integer_get()
  if(speedl_integer==0):
  if(on_speedl_is_running):
  kill on_speedl_thread_handler
  enter_critical
  on_speedl_is_running=False
  exit_critical
  
  end 
  if ON_DEBUG_LOG:
  textmsg("Speedl thread stopped")
  end 
  stopl(brake)
  end 
  return on_speedl_is_running
  end 
  def on_speedl_pause():
  on_speedl_is_enabled=False
  return on_speedl_integer_get()
  end 
  def on_speedl_resume():
  on_speedl_is_enabled=True
  return on_speedl_integer_get()
  end 
  def on_wait_ms(time_ms):
  local sync_time=ceil(norm(time_ms/2.0))
  while(sync_time>0):
  sync_time=sync_time-1
  sync()
  end
  end
  
  #======    End of OnRobot  Speedl    ======#
  on_install_tcp = False
  on_follow_tcp = False
  textmsg(on_devices_primary_log, ": Quick Changer + Lado de la herramienta de QC + [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]")
  on_tcp_active_is_primary = True
  on_tcp_vision_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_cog_vision_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_mass_vision_primary = 0.0
  on_tcp_qc_primary = p[0.0, 0.0, 0.0136, 0.0, 0.0, 0.0]
  on_cog_qc_primary = p[0.0, 0.0, 0.004, 0.0, 0.0, 0.0]
  on_mass_qc_primary = 0.06
  on_tcp_gripper_static_primary = p[0.0, 0.0, 0.017, 0.0, 0.0, 0.0]
  on_cog_gripper_primary = p[0.0, 0.0, 0.002, 0.0, 0.0, 0.0]
  on_mass_gripper_primary = 0.14
  on_tcp_tool_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_cog_tool_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_mass_tool_primary = 0.0
  #======    OnRobot Run    ======#
  
  textmsg(on_xmlrpc_start_ip,on_device_ip)
  on_portopen_javaSocket()
  sync()
  on_rtde_feed_open()
  sync()
  local gripperWDs=binary_list_to_integer(on_gripper)
  if gripperWDs==0:
  gripperWDs=-1
  else:
  gripperWDs=floor(gripperWDs/2)
  end 
  on_set_rtde_watchdog(updateHz=0.2,ftWD=on_ft,gripperWD=gripperWDs)
  sync()
  on_dataRead_running=True
  sync()
  on_dataRead_thrd=run on_dataRead_thread()
  sync()
  on_tcp_init_primary()
  on_payload_init_primary()
  
  on_tcp_set_actual_to(on_tcp_active_is_primary)
  if(on_follow_tcp):
  on_payload_set_actual()
  end 
  
  #======    End of OnRobot Run    ======#
  #======    OnRobot QC Start    ======#
  
  if(on_toolConnector):
  tc_setup_tool()
  end 
  sync()
  
  #======    End of OnRobot QC Start    ======#
  # end: URCap Installation Node
  global arribaA_F1_p=p[-.279144501954, .352062451849, .217630843278, -2.196584665421, -2.179449365538, -.001177908335]
  global arribaA_F1_q=[-1.190523926411764, -1.0387578767589147, 1.1809104124652439, -1.7579056225218928, -1.555765453969137, -1.1779382864581498]
  global abajoA_F1_p=p[-.278072802729, .349973152649, .134710501441, -2.187302677929, -2.170893449779, -.009350084917]
  global abajoA_F1_q=[-1.190667454396383, -0.9426656526378174, 1.4394829908954114, -2.126221319238187, -1.556412998829975, -1.1793354193316858]
  global Punto_de_paso_1_p=p[-.083594318931, -.437711519530, .275848954336, 1.065987365409, -2.932765467276, .066419727208]
  global Punto_de_paso_1_q=[1.089424133300786, -1.0593553346446587, 0.9393857161151473, -1.495781020527243, -1.5554059187518678, -1.1732090155230823]
  global Punto_de_paso_2_p=p[-.014750702597, -.309442485570, .403244080555, .894185451473, -2.982111864608, .102799053877]
  global Punto_de_paso_2_q=[1.0935268402099652, -1.5372310441783412, 0.9390023390399342, -1.0397697252086164, -1.543357197438386, -1.0536602179156649]
  global arribaB_F1_p=p[.255485942993, -.106097948707, .238777894308, 2.203755614216, -2.230743228011, -.033649579332]
  global arribaB_F1_q=[2.2848539352416655, -1.7739340267577148, 1.9226334730731311, -1.6995178661741726, -1.577369038258614, -0.8414099852190979]
  global abajoB_F1_p=p[.250858979288, -.105476133415, .134044109725, 2.182572840766, -2.243051083477, -.011867863361]
  global abajoB_F1_q=[2.276574134826671, -1.5835925541319718, 2.3162580172168092, -2.29774012188099, -1.5835788885699866, -0.8356931845294628]
  global Punto_de_paso_3_p=p[.273903481163, -.146151648360, .451950588078, 2.064857202426, -2.090925973133, .993649886229]
  global Punto_de_paso_3_q=[2.2192530632019043, -1.7692414722838343, 1.2738397757159632, -1.728790899316305, -1.5309603849994105, -0.891219441090719]
  $ 1 "Programa de robot"
  $ 2 "'Program generated by RoboDK v5.2.2 for UR3e on 09/11/2021 17:05:06'"
  # 'Program generated by RoboDK v5.2.2 for UR3e on 09/11/2021 17:05:06'
  $ 3 "'Using nominal kinematics.'"
  # 'Using nominal kinematics.'
  $ 4 "'Using Ref. Posicion A: p[0.161767, -0.119777, -0.855711, -0.000000, 0.000000, 3.141593]'"
  # 'Using Ref. Posicion A: p[0.161767, -0.119777, -0.855711, -0.000000, 0.000000, 3.141593]'
  $ 5 "Ajustar DO[0]=Apagar"
  set_standard_digital_out(0, False)
  $ 7 "'Using TCP SAI6199-GV_E1_jt: p[0.000000, 0.000000, 0.200000, 0.000000, 0.000000, 0.000000]'"
  # 'Using TCP SAI6199-GV_E1_jt: p[0.000000, 0.000000, 0.200000, 0.000000, 0.000000, 0.000000]'
  $ 9 "Inicio"
  movej([0.0, -1.5707963267948966, 0.0, -1.5707963267948966, 0.0, 0.0], a=1.3962634015954636, v=1.0471975511965976)
  $ 10 "MoverJ"
  $ 11 "arribaA_F1" "breakAfter"
  movej(get_inverse_kin(arribaA_F1_p, qnear=arribaA_F1_q), a=1.2, v=0.75)
  $ 12 "MoverL"
  $ 13 "abajoA_F1" "breakAfter"
  movel(abajoA_F1_p, a=1.2, v=0.25)
  $ 14 "Ajustar DO[0]=Encender"
  set_standard_digital_out(0, True)
  $ 15 "Esperar: 0.25"
  sleep(0.25)
  $ 16 "MoverL"
  $ 17 "arribaA_F1" "breakAfter"
  movel(arribaA_F1_p, a=1.2, v=0.25)
  $ 18 "MoverJ"
  $ 19 "Punto_de_paso_1" "breakAfter"
  movej(get_inverse_kin(Punto_de_paso_1_p, qnear=Punto_de_paso_1_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 20 "Punto_de_paso_2" "breakAfter"
  movej(get_inverse_kin(Punto_de_paso_2_p, qnear=Punto_de_paso_2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 21 "arribaB_F1" "breakAfter"
  movej(get_inverse_kin(arribaB_F1_p, qnear=arribaB_F1_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 22 "MoverL"
  $ 23 "abajoB_F1" "breakAfter"
  movel(abajoB_F1_p, a=1.2, v=0.25)
  $ 24 "Esperar: 0.25"
  sleep(0.25)
  $ 25 "Ajustar DO[0]=Apagar"
  set_standard_digital_out(0, False)
  $ 26 "MoverL"
  $ 27 "arribaB_F1" "breakAfter"
  movel(arribaB_F1_p, a=1.2, v=0.25)
  $ 28 "MoverJ"
  $ 29 "Punto_de_paso_3" "breakAfter"
  movej(get_inverse_kin(Punto_de_paso_3_p, qnear=Punto_de_paso_3_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 30 "Inicio"
  movej([0.0, -1.5707963267948966, 0.0, -1.5707963267948966, 0.0, 0.0], a=1.3962634015954636, v=1.0471975511965976)
end
