def Fase2():
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tcp(p[0.00755148296704608,0.003639298738154023,0.026409592411711,0.0,0.0,0.0])
  set_payload(1.14, [0.022, -0.007, 0.054])
  set_tool_communication(True, 1000000, 2, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_safety_mode_transition_hardness(1)
  step_count_47c93059_72f0_4475_affc_b33d87a57bd3 = 0.0
  thread Step_Counter_Thread_9fce1cca_7de1_44a4_a7c6_9d15535f9479():
    while (True):
      step_count_47c93059_72f0_4475_affc_b33d87a57bd3 = step_count_47c93059_72f0_4475_affc_b33d87a57bd3 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_9fce1cca_7de1_44a4_a7c6_9d15535f9479()
  set_gravity([0.0, 0.0, 9.82])
  global Mesa=p[-0.3283222416297581,-0.20095078680444134,-0.01154506462095492,-2.1087277613487028,-2.3273776320839428,-7.166709239352482E-4]
  # begin: URCap Installation Node
  #   Source: Remote TCP & Toolpath, 1.2.65.build36, Universal Robots A/S
  #   Type: Remote TCP & Toolpath
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: OnRobot, 5.1.6, OnRobot A/S
  #   Type: Configuración de OnRobot
  on_robot_type = 3
  on_robot_cycle = 2.0
  on_device_ip = "localhost"
  on_device_socket_port = 51234
  on_xmlrpc = rpc_factory("xmlrpc", "http://localhost:41414")
  on_RPC = rpc_factory("xmlrpc", "http://127.0.0.1:31416")
  ON_DEBUG_LOG = False
  on_isMetric = True
  on_toolConnector = True
  on_ioqc = False
  on_dual = False
  on_ft = False
  on_hex = False
  on_gecko = 0
  on_gripper = [False, False, False]
  #======    OnRobot Globals    ======#
  
  ON_MATH_PI=3.141593
  ON_ZEROPOSE=p[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZEROFRAME=p[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZERO3D=[0.0,0.0,0.0]
  ON_ZERO6D=[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZERO8D=[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
  ON_FALSE3D=[False,False,False]
  ON_FALSE6D=[False,False,False,False,False,False]
  ON_FALSE8D=[False,False,False,False,False,False,False,False]
  global on_return=0
  on_speedL=ON_ZERO6D
  on_speedBase=ON_ZERO6D
  on_speedVect=ON_ZERO6D
  on_speedExtra=ON_ZERO6D
  on_speedDC=ON_ZERO6D
  on_speedGecko=ON_ZERO6D
  on_floatRegShift=24
  on_intRegShift=24
  on_boolRegShift=64
  ON_BASE_SHIFT_FLOAT=24
  ON_BASE_SHIFT_INT=24
  ON_BASE_SHIFT_BOOL=64
  ON_DEVICE_SHIFT_FLOAT=3
  ON_DEVICE_SHIFT_INT=2
  ON_DEVICE_SHIFT_BOOL=7
  ON_COMMON_SHIFT_FLOAT=12
  ON_COMMON_SHIFT_INT=3
  ON_COMMON_SHIFT_BOOL=1
  ON_DI_SINGLE=0
  ON_DI_PRIMARY=1
  ON_DI_SECONDARY=2
  ON_DI_DUAL=3
  ON_DEVICE_ID_MISSING=0
  ON_INIT_TIMEOUT=500
  on_robot_TCP_offset=ON_ZEROFRAME
  on_tcp_offset_actual=ON_ZEROFRAME
  on_cog_actual=ON_ZEROFRAME
  on_mass_actual=0.0
  on_robot_mount=[0.0,0.0]
  
  #======    End of OnRobot Globals    ======#
  #======    OnRobot Interface Messages    ======#
  
  on_devices_primary_log="Dispositivos de OnRobot"
  on_devices_secondary_log="Dispositivo secundario de OnRobot"
  on_device_error_title="OnRobot - Error de dispositivo"
  on_install_error="La configuración de OnRobot no es correcta.<br>Compruebe el estado en la página de configuración de OnRobot, en la pestaña de instalación.<br>Programa detenido."
  on_device_missing="No hay ningún dispositivo conectado.<br>Programa detenido."
  ft_device_missing="No hay ningún sensor F/T OnRobot conectado.<br>Programa detenido."
  rg2ft_device_missing="No hay ninguna pinza RG2-FT conectada.<br>Programa detenido."
  rg_device_missing="No hay ninguna pinza RG conectada.<br>Programa detenido."
  vg_device_missing="No hay ninguna pinza VG conectada.<br>Programa detenido."
  gg_device_missing="No hay ninguna Gecko Gripper conectada.<br>Programa detenido."
  sg_device_missing="No hay ninguna Soft Gripper conectada.<br>Programa detenido."
  tfg_device_missing="No hay ninguna pinza 3FG conectada.<br>Programa detenido."
  on_xmlrpc_start_ip="Conexión al servidor XML-RPC de OnRobot:"
  on_java_comm_error_textmsg_title="OnRobot - Error de comunicación:"
  on_java_comm_controlsocket_open_error="Apertura de la toma 'javaSocket' incorrecta."
  on_java_comm_error_title="OnRobot - Error de comunicación"
  on_java_comm_socket_open_error="El establecimiento de la conexión con el URCap ha excedido el tiempo.<br>Compruebe el estado en la página de configuración de OnRobot, en la pestaña de instalación.<br>Programa detenido."
  on_rtde_feed_error_textmsg_title="OnRobot - Error de comunicación:"
  on_rtde_feed_open_error_textmsg="Apertura de la toma 'rtdeFeed' incorrecta."
  on_rtde_feed_error_title="OnRobot - Error de comunicación"
  on_rtde_feed_open_error="El establecimiento de la conexión con los dispositivos ha excedido el tiempo.<br>Asegúrese de que los dispositivos de OnRobot funcionen y compruebe el estado en la página de configuración de OnRobot, en la pestaña de instalación."
  
  #======    End of OnRobot Interface Messages    ======#
  #======    OnRobot Interface    ======#
  
  on_portopened_javaSocket=False
  on_rtde_feed_opened=False
  on_dataRead_running=False
  FT_SENSOR_ID_UNDEFINED=0
  FT_SENSOR_ID_UNKNOWN=1
  FT_SENSOR_ID_HEX_V1=11
  FT_SENSOR_ID_HEX_V2=12
  FT_SENSOR_ID_HEX_V3=13
  FT_SENSOR_ID_RG2FT_V0=20
  FT_SENSOR_ID_RG2FT_V1=21
  FT_SENSOR_ID_RG2FT_V2=22
  def on_error(status_flag,message,title,stop_var=False):
  if(status_flag):
  popup(message,title=title,error=True,blocking=False)
  stop_var=True
  end 
  return stop_var
  end 
  def on_warning(status_flag,message,title):
  if(status_flag):
  textmsg(title,message)
  end 
  end 
  def on_missing():
  popup(on_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def ft_missing():
  popup(ft_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def rg2ft_missing():
  popup(rg2ft_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def rg_missing():
  popup(rg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def vg_missing():
  popup(vg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def gg_missing():
  popup(gg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def sg_missing():
  popup(sg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def tfg_missing():
  popup(tfg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def on_portclose_javaSocket():
  socket_close("javaSocket")
  on_portopened_javaSocket=False
  end 
  def on_portopen_javaSocket():
  on_portclose_javaSocket()
  on_portopened_javaSocket=socket_open("127.0.0.1",44005,"javaSocket")
  if not on_portopened_javaSocket:
  textmsg(on_java_comm_error_textmsg_title,on_java_comm_controlsocket_open_error)
  popup(on_java_comm_socket_open_error,title=on_java_comm_error_title,error=True,blocking=False)
  halt
  end 
  end 
  def on_rtde_feed_close():
  socket_close("rtdeFeed")
  on_rtde_feed_opened=False
  end 
  def on_rtde_feed_open():
  on_rtde_feed_close()
  on_rtde_feed_opened=socket_open(on_device_ip,on_device_socket_port,"rtdeFeed")
  if not on_rtde_feed_opened:
  on_rtde_feed_opened=socket_open(on_device_ip,on_device_socket_port,"rtdeFeed")
  end 
  if not on_rtde_feed_opened:
  textmsg(on_rtde_feed_error_textmsg_title,on_rtde_feed_open_error_textmsg)
  popup(on_rtde_feed_open_error,title=on_rtde_feed_error_title,error=True,blocking=False)
  halt
  end 
  end 
  def on_dataRead():
  enter_critical
  floatRegDummy=read_input_float_register(0+on_floatRegShift)
  on_speedVect[0]=floatRegDummy/1000.0 
  floatRegDummy=read_input_float_register(1+on_floatRegShift)
  on_speedVect[1]=floatRegDummy/1000.0 
  floatRegDummy=read_input_float_register(2+on_floatRegShift)
  on_speedVect[2]=floatRegDummy/1000.0 
  floatRegDummy=read_input_float_register(3+on_floatRegShift)
  on_speedVect[3]=floatRegDummy
  floatRegDummy=read_input_float_register(4+on_floatRegShift)
  on_speedVect[4]=floatRegDummy
  floatRegDummy=read_input_float_register(5+on_floatRegShift)
  on_speedVect[5]=floatRegDummy
  exit_critical
  end 
  def on_set_rtde_watchdog(updateHz=5,ftWD=False,gripperWD=-1):
  local update_str=str_cat(" watchdog set to [Hz]: ",updateHz)
  if ftWD:
  watchdog_int_reg_str=str_cat("input_int_register_",0+on_intRegShift)
  rtde_set_watchdog(watchdog_int_reg_str,updateHz,"stop")
  if ON_DEBUG_LOG:
  textmsg(watchdog_int_reg_str,update_str)
  end 
  end 
  if not(gripperWD<0):
  if(gripperWD==ON_DI_SINGLE or gripperWD==ON_DI_PRIMARY or gripperWD==ON_DI_DUAL):
  watchdog_int_reg_str=str_cat("input_int_register_",3+on_intRegShift)
  rtde_set_watchdog(watchdog_int_reg_str,updateHz,"stop")
  if ON_DEBUG_LOG:
  textmsg(watchdog_int_reg_str,update_str)
  end 
  end 
  if(gripperWD==ON_DI_SECONDARY or gripperWD==ON_DI_DUAL):
  watchdog_int_reg_str=str_cat("input_int_register_",ON_DEVICE_SHIFT_INT+3+on_intRegShift)
  rtde_set_watchdog(watchdog_int_reg_str,updateHz,"stop")
  if ON_DEBUG_LOG:
  textmsg(watchdog_int_reg_str,update_str)
  end 
  end 
  end 
  end 
  def on_speedVect_get():
  return[on_speedVect[0],on_speedVect[1],on_speedVect[2],on_speedVect[3],on_speedVect[4],on_speedVect[5]]
  end 
  def on_speedDC_get():
  local speedExtra=ON_ZERO6D
  if on_speedl_for_depthcompensation:
  speedExtra=[on_speedDC[0],on_speedDC[1],on_speedDC[2],on_speedDC[3],on_speedDC[4],on_speedDC[5]]
  end 
  return speedExtra
  end 
  def on_speedDC_set(speedDC):
  on_speedDC=[speedDC[0],speedDC[1],speedDC[2],speedDC[3],speedDC[4],speedDC[5]]
  end 
  def on_speedGecko_get():
  local speedExtra=ON_ZERO6D
  if on_speedl_for_gecko:
  speedExtra=[on_speedGecko[0],on_speedGecko[1],on_speedGecko[2],on_speedGecko[3],on_speedGecko[4],on_speedGecko[5]]
  end 
  return speedExtra
  end 
  def on_speedGecko_set(speedGecko):
  on_speedGecko=[speedGecko[0],speedGecko[1],speedGecko[2],speedGecko[3],speedGecko[4],speedGecko[5]]
  end 
  thread on_dataRead_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting on_dataRead thread")
  end 
  while on_dataRead_running:
  sync()
  on_dataRead()
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping on_dataRead thread")
  end 
  end 
  
  #======    End of OnRobot Interface    ======#
  #======    OnRobot QC Setup Tool Connector    ======#
  
  def tc_setup_tool():
  if ON_DEBUG_LOG:
  textmsg("QC Setup Tool Connector start...")
  end 
  set_tool_voltage(24)
  
  set_tool_communication(True,1000000,2,1,1.5,3.5)
  
  if ON_DEBUG_LOG:
  textmsg("QC Setup Tool Connector end.")
  end 
  end 
  
  #======    End of OnRobot QC Setup Tool Connector    ======#
  #======    OnRobot TCP Messages    ======#
  
  on_tcp_log_msg_default="OnRobot: Desplazamiento del TCP del robot establecido en:"
  on_tcp_log_msg_primary="OnRobot: Desplazamiento del TCP del robot establecido en primario:"
  on_tcp_log_msg_secondary="OnRobot: Desplazamiento del TCP del robot establecido en secundario:"
  
  #======    End of OnRobot TCP Messages    ======#
  #======    OnRobot TCP    ======#
  
  on_tcp_offset_actual=ON_ZEROFRAME
  on_tcp_offset_primary=ON_ZEROFRAME
  on_tcp_static_primary=ON_ZEROFRAME
  on_tcp_dynamic_primary=ON_ZEROFRAME
  on_tcp_vision_primary=ON_ZEROFRAME
  on_tcp_qc_primary=ON_ZEROFRAME
  on_tcp_base_primary=ON_ZEROFRAME
  on_tcp_gripper_static_primary=ON_ZEROFRAME
  on_tcp_tool_primary=ON_ZEROFRAME
  on_tcp_gripper_dynamic_primary=ON_ZEROFRAME
  on_tcp_gripper_primary=ON_ZEROFRAME
  on_tcp_offset_secondary=ON_ZEROFRAME
  on_tcp_static_secondary=ON_ZEROFRAME
  on_tcp_dynamic_secondary=ON_ZEROFRAME
  on_tcp_vision_secondary=ON_ZEROFRAME
  on_tcp_qc_secondary=ON_ZEROFRAME
  on_tcp_base_secondary=ON_ZEROFRAME
  on_tcp_gripper_static_secondary=ON_ZEROFRAME
  on_tcp_tool_secondary=ON_ZEROFRAME
  on_tcp_gripper_dynamic_secondary=ON_ZEROFRAME
  on_tcp_gripper_secondary=ON_ZEROFRAME
  def on_tcp_update_primary():
  if ON_DEBUG_LOG:
  textmsg("TCP Update Primary start..")
  end 
  on_tcp_gripper_dynamic_primary=p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  enter_critical
  on_tcp_dynamic_primary=pose_trans(on_tcp_static_primary,on_tcp_gripper_dynamic_primary)
  on_tcp_offset_primary=pose_trans(on_tcp_dynamic_primary,on_tcp_tool_primary)
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("TCP Update Primary end.")
  end 
  end 
  def on_tcp_init_primary():
  if ON_DEBUG_LOG:
  textmsg("TCP Init Primary start..")
  end 
  enter_critical
  on_tcp_base_primary=pose_trans(on_tcp_vision_primary,on_tcp_qc_primary)
  on_tcp_static_primary=pose_trans(on_tcp_base_primary,on_tcp_gripper_static_primary)
  exit_critical
  on_tcp_update_primary()
  if ON_DEBUG_LOG:
  textmsg("TCP Init Primary end.")
  end 
  end 
  def on_tcp_offset_set(TCP_offset):
  if ON_DEBUG_LOG:
  textmsg("TCP Offset set started!")
  end 
  on_tcp_offset_send(TCP_offset)
  if(on_follow_tcp):
  set_tcp(TCP_offset)
  end 
  on_robot_TCP_offset=TCP_offset
  if ON_DEBUG_LOG:
  textmsg("TCP Offset set to: ",on_robot_TCP_offset)
  end 
  end 
  def on_tcp_offset_forced_set_actual(isPrimary=True):
  if(not on_follow_tcp):
  
  local tcp_log_msg=on_tcp_log_msg_default
  
  textmsg(tcp_log_msg,on_tcp_offset_actual)
  set_tcp(on_tcp_offset_actual)
  end 
  end 
  def on_tcp_update(isPrimary=True):
  on_tcp_update_primary()
  
  on_tcp_set_actual_to(isPrimary)
  end 
  def on_tcp_set_actual_to(isPrimary=True):
  
  on_tcp_offset_actual=on_tcp_offset_primary
  if(on_follow_tcp):
  textmsg(on_tcp_log_msg_default,on_tcp_offset_actual)
  end 
  
  on_tcp_active_is_primary=isPrimary
  on_tcp_offset_set(on_tcp_offset_actual)
  end 
  def on_tcp_update_tool_primary(tool_offset):
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool Primary start..")
  end 
  on_tcp_tool_primary=tool_offset
  on_tcp_update_primary()
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool Primary end.")
  end 
  end 
  def on_tcp_tool_rpy_get(xyz=[0.0,0.0,0.0],rpy=[0.0,0.0,0.0]):
  local rotvec=rpy2rotvec(rpy)
  local tool_offset=p[xyz[0],xyz[1],xyz[2],rotvec[0],rotvec[1],rotvec[2]]
  return tool_offset
  end 
  
  def on_tcp_update_tool(tool_offset,tool_index=0):
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool start..")
  end 
  if(tool_index!=ON_DI_SECONDARY):
  on_tcp_update_tool_primary(tool_offset)
  local isPrimary=True
  
  end 
  on_tcp_set_actual_to(isPrimary)
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool end.")
  end 
  end 
  
  #======    End of OnRobot TCP    ======#
  #======    OnRobot Payload Messages    ======#
  
  on_mass_log_msg="OnRobot: Masa de la carga útil del robot establecida en:"
  on_cog_log_msg="OnRobot: Centro de gravedad de la carga útil del robot establecido en:"
  
  #======    End of OnRobot Payload Messages    ======#
  #======    OnRobot Payload    ======#
  
  on_cog_actual=ON_ZEROFRAME
  on_mass_actual=0.0
  on_cog_primary=ON_ZEROFRAME
  on_cog_L1L2_primary=ON_ZEROFRAME
  on_mass_primary=0.0
  on_mass_L1L2_primary=0.0
  on_cog_vision_primary=ON_ZEROFRAME
  on_cog_qc_primary=ON_ZEROFRAME
  on_cog_base_primary=ON_ZEROFRAME
  on_cog_gripper_primary=ON_ZEROFRAME
  on_cog_tool_primary=ON_ZEROFRAME
  on_mass_vision_primary=0.0
  on_mass_qc_primary=0.0
  on_mass_base_primary=0.0
  on_mass_gripper_primary=0.0
  on_mass_tool_primary=0.0
  on_cog_secondary=ON_ZEROFRAME
  on_mass_secondary=0.0
  on_cog_gripper_secondary=ON_ZEROFRAME
  on_mass_gripper_secondary=0.0
  on_cog_tool_secondary=ON_ZEROFRAME
  on_mass_tool_secondary=0.0
  ON_LB2KG001=0.45359237/100
  def on_payload_update_primary():
  if ON_DEBUG_LOG:
  textmsg("Payload Update Primary start..")
  end 
  enter_critical
  on_mass_primary=on_mass_L1L2_primary+on_mass_tool_primary
  local massL1L2L3Ratio=on_mass_tool_primary/on_mass_primary
  local toolAbsCOG=pose_trans(on_tcp_dynamic_primary,on_cog_tool_primary)
  toolAbsCOG=p[toolAbsCOG[0],toolAbsCOG[1],toolAbsCOG[2],0.0,0.0,0.0]
  on_cog_primary=interpolate_pose(on_cog_L1L2_primary,toolAbsCOG,massL1L2L3Ratio)
  on_cog_primary=p[on_cog_primary[0],on_cog_primary[1],on_cog_primary[2],0.0,0.0,0.0]
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("Payload Update Primary end.")
  end 
  end 
  def on_payload_init_primary():
  if ON_DEBUG_LOG:
  textmsg("Payload Init Primary start..")
  end 
  enter_critical
  on_mass_base_primary=on_mass_vision_primary+on_mass_qc_primary
  local massL0L1Ratio=on_mass_qc_primary/on_mass_base_primary
  on_mass_L1L2_primary=on_mass_base_primary+on_mass_gripper_primary
  local massL1L2Ratio=on_mass_gripper_primary/on_mass_L1L2_primary
  local qcAbsCOG=pose_trans(on_tcp_vision_primary,on_cog_qc_primary)
  qcAbsCOG=p[qcAbsCOG[0],qcAbsCOG[1],qcAbsCOG[2],0.0,0.0,0.0]
  on_cog_base_primary=interpolate_pose(on_cog_vision_primary,qcAbsCOG,massL0L1Ratio)
  on_cog_base_primary=p[on_cog_base_primary[0],on_cog_base_primary[1],on_cog_base_primary[2],0.0,0.0,0.0]
  local gripperAbsCOG=pose_trans(on_tcp_base_primary,on_cog_gripper_primary)
  gripperAbsCOG=p[gripperAbsCOG[0],gripperAbsCOG[1],gripperAbsCOG[2],0.0,0.0,0.0]
  on_cog_L1L2_primary=interpolate_pose(on_cog_base_primary,gripperAbsCOG,massL1L2Ratio)
  on_cog_L1L2_primary=p[on_cog_L1L2_primary[0],on_cog_L1L2_primary[1],on_cog_L1L2_primary[2],0.0,0.0,0.0]
  exit_critical
  on_payload_update_primary()
  if ON_DEBUG_LOG:
  textmsg("Payload Init Primary end.")
  end 
  end 
  def on_payload_update():
  on_payload_update_primary()
  
  on_mass_actual =on_mass_primary
  on_cog_actual=on_cog_primary
  
  on_payload_set_actual()
  end 
  def on_payload_set_actual():
  
  on_mass_actual =on_mass_primary
  on_cog_actual=on_cog_primary
  
  local CoG=[on_cog_actual[0],on_cog_actual[1],on_cog_actual[2]]
  on_payload_set(on_mass_actual,CoG)
  end 
  def on_payload_update_tool_primary(tool_mass=0,tool_cog=[0.0,0.0,0.0]):
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool Primary start..")
  end 
  on_cog_tool_primary=p[tool_cog[0],tool_cog[1],tool_cog[2],0.0,0.0,0.0]
  on_mass_tool_primary=tool_mass
  on_payload_update_primary()
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool Primary end.")
  end 
  end 
  def on_payload_set(mass,CoG):
  if ON_DEBUG_LOG:
  textmsg("Payload set started!")
  end 
  local center_of_gravity=[CoG[0],CoG[1],CoG[2]]
  on_payload_send(center_of_gravity,mass)
  if(on_isMetric):
  local roundedMass=floor(mass*100+0.5)/100
  else:
  local roundedMass=floor(mass/ON_LB2KG001+0.5)*ON_LB2KG001
  end 
  set_payload(roundedMass,center_of_gravity)
  on_mass_actual=roundedMass
  on_cog_actual=p[CoG[0],CoG[1],CoG[2],0.0,0.0,0.0]
  if ON_DEBUG_LOG:
  textmsg("Payload mass, CoG set to: ",str_cat(str_cat(mass,", "),CoG))
  end 
  end 
  
  def on_payload_update_secondary():
  end 
  def on_payload_init_secondary():
  end 
  
  def on_payload_update_tool(tool_mass,tool_cog=[0.0,0.0,0.0],tool_index=0):
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool start..")
  end 
  if(tool_index!=ON_DI_SECONDARY):
  on_cog_tool_primary=p[tool_cog[0],tool_cog[1],tool_cog[2],0.0,0.0,0.0]
  on_mass_tool_primary=tool_mass
  else:
  on_cog_tool_secondary=p[tool_cog[0],tool_cog[1],tool_cog[2],0.0,0.0,0.0]
  on_mass_tool_secondary=tool_mass
  end 
  on_payload_update()
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool end.")
  end 
  end 
  def on_payload_get_cog2tcp_tool(tool_index=0):
  if(tool_index!=ON_DI_SECONDARY):
  local cog_tool=[on_tcp_tool_primary[0],on_tcp_tool_primary[1],on_tcp_tool_primary[2]]
  else:
  local cog_tool=[on_tcp_tool_secondary[0],on_tcp_tool_secondary[1],on_tcp_tool_secondary[2]]
  end 
  return cog_tool
  end 
  
  #======    End of OnRobot Payload    ======#
  #======    OnRobot QC TCP    ======#
  
  onrobotmini=0
  
  def on_tcp_offset_send(TCP_offset):
  on_robot_TCP_offset=TCP_offset
  end 
  def on_payload_send(CoG,mass):
  on_robot_payload_cog=CoG
  on_robot_payload_mass=mass
  end 
  
  
  #======    End of OnRobot QC TCP    ======#
  #======    OnRobot  Speedl    ======#
  
  on_speedl_thread_handler=0
  on_speedl_is_enabled=False
  on_speedl_is_running=False
  on_speedl_acc=0.0
  ft_speedl_hg_caranteen_reached=False
  ft_speedl_hg_caranteen_safemode=False
  on_speedl_for_ftcontrol=False
  on_speedl_for_move=False
  on_speedl_for_handguide=False
  on_speedl_for_insertpart=False
  on_speedl_for_depthcompensation=False
  on_speedl_for_center=False
  on_speedl_for_gecko=False
  on_speedl_acc=10000.0 
  on_speedl_acc_to_zero=3.0 
  ON_SPEEDL_FTCONTROL=1
  ON_SPEEDL_HANDGUIDE=2
  ON_SPEEDL_MOVE=3
  ON_SPEEDL_INSERTPART=4
  ON_SPEEDL_DEPTHCOMP=5
  ON_SPEEDL_CENTER=6
  ON_SPEEDL_GECKO=7
  def on_speedl_add_extra(speedBase,speedExtra):
  speedSum=ON_ZERO6D
  speedBaseP=p[speedBase[0],speedBase[1],speedBase[2],speedBase[3],speedBase[4],speedBase[5]]
  speedExtraP=p[speedExtra[0],speedExtra[1],speedExtra[2],speedExtra[3],speedExtra[4],speedExtra[5]]
  speedSumP=pose_add(speedExtraP,speedBaseP)
  speedSum=[speedSumP[0],speedSumP[1],speedSumP[2],speedSumP[3],speedSumP[4],speedSumP[5]]
  return speedSum
  end 
  
  thread on_speedl_thread():
  if ON_DEBUG_LOG:
  textmsg("Speedl thread started..")
  end 
  enter_critical
  on_speedl_is_running=True
  on_speedl_is_enabled=True
  exit_critical
  on_speedL=ON_ZERO6D
  
  while on_speedl_is_running:
  on_speedBase=on_speedVect_get()
  on_speedL=on_speedBase
  
  
  
  if on_speedl_is_enabled:
  speedl(on_speedL,a=on_speedl_acc,t=0.001)
  else:
  speedl(ON_ZERO6D,a=on_speedl_acc_to_zero,t=0.001)
  end 
  end 
  
  on_speedL=ON_ZERO6D
  if ON_DEBUG_LOG:
  textmsg("Speedl thread ended.")
  end 
  end 
  def on_speedl_integer_get():
  local speedl_integer=binary_list_to_integer([on_speedl_for_ftcontrol,on_speedl_for_handguide,on_speedl_for_move,on_speedl_for_insertpart,on_speedl_for_depthcompensation,on_speedl_for_center,on_speedl_for_gecko])
  return speedl_integer
  end 
  def on_speedl_start_for(speedl_id):
  if(speedl_id==ON_SPEEDL_FTCONTROL):
  on_speedl_for_ftcontrol=True
  elif(speedl_id==ON_SPEEDL_HANDGUIDE):
  on_speedl_for_handguide=True
  elif(speedl_id==ON_SPEEDL_MOVE):
  on_speedl_for_move=True
  elif(speedl_id==ON_SPEEDL_INSERTPART):
  on_speedl_for_insertpart=True
  elif(speedl_id==ON_SPEEDL_DEPTHCOMP):
  on_speedl_for_depthcompensation=True
  elif(speedl_id==ON_SPEEDL_CENTER):
  on_speedl_for_center=True
  elif(speedl_id==ON_SPEEDL_GECKO):
  on_speedl_for_gecko=True
  else:
  textmsg("Unknown Start speedl ID received: ",speedl_id)
  end 
  local speedl_integer=on_speedl_integer_get()
  if not(speedl_integer==0):
  if not on_speedl_is_running:
  on_speedl_thread_handler=run on_speedl_thread()
  end 
  end 
  return on_speedl_is_running
  end 
  def on_speedl_stop_for(speedl_id,brake=10):
  if(speedl_id==ON_SPEEDL_FTCONTROL):
  on_speedl_for_ftcontrol=False
  elif(speedl_id==ON_SPEEDL_HANDGUIDE):
  on_speedl_for_handguide=False
  elif(speedl_id==ON_SPEEDL_MOVE):
  on_speedl_for_move=False
  elif(speedl_id==ON_SPEEDL_INSERTPART):
  on_speedl_for_insertpart=False
  elif(speedl_id==ON_SPEEDL_DEPTHCOMP):
  on_speedl_for_depthcompensation=False
  on_speedDC_set(ON_ZERO6D)
  elif(speedl_id==ON_SPEEDL_CENTER):
  on_speedl_for_center=False
  elif(speedl_id==ON_SPEEDL_GECKO):
  on_speedl_for_gecko=False
  on_speedGecko_set(ON_ZERO6D)
  else:
  textmsg("Unknown Stop speedl ID received: ",speedl_id)
  end 
  local speedl_integer=on_speedl_integer_get()
  if(speedl_integer==0):
  if(on_speedl_is_running):
  kill on_speedl_thread_handler
  enter_critical
  on_speedl_is_running=False
  exit_critical
  
  end 
  if ON_DEBUG_LOG:
  textmsg("Speedl thread stopped")
  end 
  stopl(brake)
  end 
  return on_speedl_is_running
  end 
  def on_speedl_pause():
  on_speedl_is_enabled=False
  return on_speedl_integer_get()
  end 
  def on_speedl_resume():
  on_speedl_is_enabled=True
  return on_speedl_integer_get()
  end 
  def on_wait_ms(time_ms):
  local sync_time=ceil(norm(time_ms/2.0))
  while(sync_time>0):
  sync_time=sync_time-1
  sync()
  end
  end
  
  #======    End of OnRobot  Speedl    ======#
  on_install_tcp = False
  on_follow_tcp = False
  textmsg(on_devices_primary_log, ": Quick Changer + Lado de la herramienta de QC + [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]")
  on_tcp_active_is_primary = True
  on_tcp_vision_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_cog_vision_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_mass_vision_primary = 0.0
  on_tcp_qc_primary = p[0.0, 0.0, 0.0136, 0.0, 0.0, 0.0]
  on_cog_qc_primary = p[0.0, 0.0, 0.004, 0.0, 0.0, 0.0]
  on_mass_qc_primary = 0.06
  on_tcp_gripper_static_primary = p[0.0, 0.0, 0.017, 0.0, 0.0, 0.0]
  on_cog_gripper_primary = p[0.0, 0.0, 0.002, 0.0, 0.0, 0.0]
  on_mass_gripper_primary = 0.14
  on_tcp_tool_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_cog_tool_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_mass_tool_primary = 0.0
  #======    OnRobot Run    ======#
  
  textmsg(on_xmlrpc_start_ip,on_device_ip)
  on_portopen_javaSocket()
  sync()
  on_rtde_feed_open()
  sync()
  local gripperWDs=binary_list_to_integer(on_gripper)
  if gripperWDs==0:
  gripperWDs=-1
  else:
  gripperWDs=floor(gripperWDs/2)
  end 
  on_set_rtde_watchdog(updateHz=0.2,ftWD=on_ft,gripperWD=gripperWDs)
  sync()
  on_dataRead_running=True
  sync()
  on_dataRead_thrd=run on_dataRead_thread()
  sync()
  on_tcp_init_primary()
  on_payload_init_primary()
  
  on_tcp_set_actual_to(on_tcp_active_is_primary)
  if(on_follow_tcp):
  on_payload_set_actual()
  end 
  
  #======    End of OnRobot Run    ======#
  #======    OnRobot QC Start    ======#
  
  if(on_toolConnector):
  tc_setup_tool()
  end 
  sync()
  
  #======    End of OnRobot QC Start    ======#
  # end: URCap Installation Node
  global arribaRodB_p=p[.194047598496, .254565927073, .123863647138, -2.207925560878, -2.214592398570, .011415649425]
  global arribaRodB_q=[1.3220524787902832, -1.5547350210002442, -1.490816593170166, -1.664668699304098, 1.5818865299224854, -1.818998161946432]
  global abajoRodB_p=p[.194045673537, .254563594258, -.005943799965, -2.207934289956, -2.214583739378, .011429138033]
  global abajoRodB_q=[1.3218846321106443, -1.6726147137083949, -2.0007510185241557, -1.0368855756572657, 1.582761049270581, -1.8207567373858362]
  global arribaP1_F2_p=p[.218374372055, -.029732860422, .075849359936, -2.208010862124, -2.214657416931, .011636022046]
  global arribaP1_F2_q=[0.47634744644169036, -1.0782528680613446, -2.052947044372594, -1.5915252170958425, 1.5792386531829588, -2.6642420927630317]
  global abajoP1_F2_p=p[.213326559063, -.028050590043, -.016565953541, -2.207971347712, -2.214664878635, .011503322614]
  global abajoP1_F2_q=[0.49833440780629346, -1.1599527162365852, -2.4640474319457186, -1.098408774738635, 1.5801973342896112, -2.6433351675617853]
  global arribaP2_F2_p=p[.211179447767, -.100212123550, .088000293172, -2.208026277507, -2.214716765692, .011231508116]
  global arribaP2_F2_q=[0.13560509681702645, -1.152217940693217, -1.9578514099121236, -1.615559240380752, 1.5745306015014577, -3.004975144063125]
  global abajoP2_F2_p=p[.213148696534, -.102679353504, -.018294387753, -2.208123709051, -2.214600930899, .011651706601]
  global abajoP2_F2_q=[0.12304258346560015, -1.3056922715953192, -2.389227867126475, -1.03102167070423, 1.5747699737548662, -3.018769566212754]
  global arribaP3_F2_p=p[.210891585436, -.177882956119, .088002307986, -2.207996337340, -2.214742848505, .011181435025]
  global arribaP3_F2_q=[-0.21229106584657131, -1.3616600793651763, -1.8211178779601367, -1.5443704885295926, 1.568480491638179, -3.353291336690077]
  global abajoP3_F3_p=p[.213324692763, -.173905671604, -.018867055442, -2.208031672886, -2.214664686641, .011266460875]
  global abajoP3_F3_q=[-0.19428855577576254, -1.5132616323283266, -2.229156494140682, -0.9847517770579319, 1.5693790912628058, -3.336577717457896]
  global arribaP4_F2_p=p[.291970268446, -.029241310649, .075850990760, -2.208009652747, -2.214680212144, .011621595431]
  global arribaP4_F2_q=[0.3482890129089813, -1.449893311863229, -1.8077335357666513, -1.466449574833237, 1.5763156414031592, -2.7930677572832976]
  global abajoP4_F2_p=p[.292485521244, -.029156837293, -.015453261319, -2.211335118390, -2.217182548375, -.004684129494]
  global abajoP4_F2_q=[0.3473205211469564, -1.5821409669328128, -2.149722039681464, -0.9810495725460102, 1.5776031108775976, -2.794795731218428]
  global arribaP5_F2_p=p[.292036813486, -.103169149761, .075847632800, -2.208089109948, -2.214600892977, .011653557493]
  global arribaP5_F2_q=[0.08728861808779773, -1.525038079624525, -1.7387804985046138, -1.4623688024333834, 1.572398185729952, -3.054149452839951]
  global abajoP5_F2_p=p[.293541840270, -.102245072266, -.017615069126, -2.208149232039, -2.214639652251, .011752259192]
  global abajoP5_F2_q=[0.09023352232810683, -1.671676357560169, -2.0589649185777104, -0.9955358053375656, 1.5728907218972898, -3.0524063288128827]
  global arribaP6_F2_p=p[.290851119068, -.178174895823, .075843564054, -2.208128034602, -2.214543307174, .011675875953]
  global arribaP6_F2_q=[-0.1603496710406711, -1.6640440426267844, -1.5952486991883283, -1.4679694932749419, 1.5680491924285889, -3.302058045064104]
  global abajoP6_F2_p=p[.291040824108, -.174951468364, -.017979381965, -2.208127040194, -2.214553060147, .011668273009]
  global abajoP6_F2_q=[-0.150326553975205, -1.7894135914243732, -1.9169073104859855, -1.0209089082529141, 1.5688159465789422, -3.2932346502886864]
  $ 1 "Robot Program"
  $ 2 "Set DO[1]=Apagar"
  set_standard_digital_out(1, False)
  $ 3 "Wait read_input_boolean_register(0)≟ True "
  while (not(read_input_boolean_register(0) ==   True  )):
    sync()
  end
  $ 4 "i≔1"
  global i=1
  $ 5 "CantPiezas≔read_input_integer_register(1)"
  global CantPiezas=read_input_integer_register(1)
  $ 7 "'Using TCP SAI6199-GV_E1_jt: p[0.000000, 0.000000, 0.200000, 0.000000, 0.000000, 0.000000]'"
  # 'Using TCP SAI6199-GV_E1_jt: p[0.000000, 0.000000, 0.200000, 0.000000, 0.000000, 0.000000]'
  $ 8 "set_tcp(p[0.000000, 0.000000, 0.200000, 0.000000, 0.000000, 0.000000])"
  set_tcp(p[0.000000, 0.000000, 0.200000, 0.000000, 0.000000, 0.000000])
  $ 9 "Loop i≤CantPiezas"
  while (i <= CantPiezas):
    $ 10 "movej([1.284618, -1.581916, -1.622086, -1.507893, 1.586904, -1.859980],1.20000,0.25000,0,0.0000)"
    movej([1.284618, -1.581916, -1.622086, -1.507893, 1.586904, -1.859980],1.20000,0.25000,0,0.0000)
    $ 11 "MoveJ"
    $ 12 "arribaRodB" "breakAfter"
    movej(get_inverse_kin(arribaRodB_p, qnear=arribaRodB_q), a=1.2, v=0.75)
    $ 13 "MoveL"
    $ 14 "abajoRodB" "breakAfter"
    movel(abajoRodB_p, a=1.2, v=0.25)
    $ 15 "Set DO[1]=Encender"
    set_standard_digital_out(1, True)
    $ 16 "Wait: 0.25"
    sleep(0.25)
    $ 17 "MoveL"
    $ 18 "arribaRodB" "breakAfter"
    movel(arribaRodB_p, a=1.2, v=0.25)
    $ 19 "If i≟1"
    if (i == 1):
      $ 20 "MoveJ"
      $ 21 "arribaP1_F2" "breakAfter"
      movej(get_inverse_kin(arribaP1_F2_p, qnear=arribaP1_F2_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 22 "MoveL"
      $ 23 "abajoP1_F2" "breakAfter"
      movel(abajoP1_F2_p, a=1.2, v=0.25)
      $ 24 "Wait: 0.5"
      sleep(0.5)
      $ 25 "Set DO[1]=Apagar"
      set_standard_digital_out(1, False)
      $ 26 "Wait: 0.5"
      sleep(0.5)
      $ 27 "MoveL"
      $ 28 "arribaP1_F2" "breakAfter"
      movel(arribaP1_F2_p, a=1.2, v=0.25)
    else:
      $ 29 "ElseIf i≟2"
      if (i == 2):
        $ 30 "MoveJ"
        $ 31 "arribaP2_F2" "breakAfter"
        movej(get_inverse_kin(arribaP2_F2_p, qnear=arribaP2_F2_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 32 "MoveL"
        $ 33 "abajoP2_F2" "breakAfter"
        movel(abajoP2_F2_p, a=1.2, v=0.25)
        $ 34 "Wait: 0.5"
        sleep(0.5)
        $ 35 "Set DO[1]=Apagar"
        set_standard_digital_out(1, False)
        $ 36 "Wait: 0.5"
        sleep(0.5)
        $ 37 "MoveL"
        $ 38 "arribaP2_F2" "breakAfter"
        movel(arribaP2_F2_p, a=1.2, v=0.25)
      else:
        $ 39 "ElseIf i≟3"
        if (i == 3):
          $ 40 "MoveJ"
          $ 41 "arribaP3_F2" "breakAfter"
          movej(get_inverse_kin(arribaP3_F2_p, qnear=arribaP3_F2_q), a=1.3962634015954636, v=1.0471975511965976)
          $ 42 "MoveL"
          $ 43 "abajoP3_F3" "breakAfter"
          movel(abajoP3_F3_p, a=1.2, v=0.25)
          $ 44 "Wait: 0.5"
          sleep(0.5)
          $ 45 "Set DO[1]=Apagar"
          set_standard_digital_out(1, False)
          $ 46 "Wait: 0.5"
          sleep(0.5)
          $ 47 "MoveL"
          $ 48 "arribaP3_F2" "breakAfter"
          movel(arribaP3_F2_p, a=1.2, v=0.25)
        else:
          $ 49 "ElseIf i≟4"
          if (i == 4):
            $ 50 "MoveJ"
            $ 51 "arribaP4_F2" "breakAfter"
            movej(get_inverse_kin(arribaP4_F2_p, qnear=arribaP4_F2_q), a=1.3962634015954636, v=1.0471975511965976)
            $ 52 "MoveL"
            $ 53 "abajoP4_F2" "breakAfter"
            movel(abajoP4_F2_p, a=1.2, v=0.25)
            $ 54 "Wait: 0.5"
            sleep(0.5)
            $ 55 "Set DO[1]=Apagar"
            set_standard_digital_out(1, False)
            $ 56 "Wait: 0.5"
            sleep(0.5)
            $ 57 "MoveL"
            $ 58 "arribaP4_F2" "breakAfter"
            movel(arribaP4_F2_p, a=1.2, v=0.25)
          else:
            $ 59 "ElseIf i≟5"
            if (i == 5):
              $ 60 "MoveJ"
              $ 61 "arribaP5_F2" "breakAfter"
              movej(get_inverse_kin(arribaP5_F2_p, qnear=arribaP5_F2_q), a=1.3962634015954636, v=1.0471975511965976)
              $ 62 "MoveL"
              $ 63 "abajoP5_F2" "breakAfter"
              movel(abajoP5_F2_p, a=1.2, v=0.25)
              $ 64 "Wait: 0.5"
              sleep(0.5)
              $ 65 "Set DO[1]=Apagar"
              set_standard_digital_out(1, False)
              $ 66 "Wait: 0.5"
              sleep(0.5)
              $ 67 "MoveL"
              $ 68 "arribaP5_F2" "breakAfter"
              movel(arribaP5_F2_p, a=1.2, v=0.25)
            else:
              $ 69 "Else" "noBreak"
              $ 70 "MoveJ"
              $ 71 "arribaP6_F2" "breakAfter"
              movej(get_inverse_kin(arribaP6_F2_p, qnear=arribaP6_F2_q), a=1.3962634015954636, v=1.0471975511965976)
              $ 72 "MoveL"
              $ 73 "abajoP6_F2" "breakAfter"
              movel(abajoP6_F2_p, a=1.2, v=0.25)
              $ 74 "Wait: 0.5"
              sleep(0.5)
              $ 75 "Set DO[1]=Apagar"
              set_standard_digital_out(1, False)
              $ 76 "Wait: 0.5"
              sleep(0.5)
              $ 77 "MoveL"
              $ 78 "arribaP6_F2" "breakAfter"
              movel(arribaP6_F2_p, a=1.2, v=0.25)
            end
          end
        end
      end
    end
    $ 79 "NumPiezas≔i"
    global NumPiezas=i
    $ 80 "write_output_integer_registet(0,NumPiezas)"
    write_output_integer_registet(0,NumPiezas)
    $ 81 "i≔i+1"
    global i=i+1
  end
  $ 82 "movej([0.017453, -1.553343, 0.017453, -1.553343, 0.017453, 0.017453],1.20000,0.25000,0,0.0000)"
  movej([0.017453, -1.553343, 0.017453, -1.553343, 0.017453, 0.017453],1.20000,0.25000,0,0.0000)
  $ 83 "Home"
  movej([0.0, -1.5707963267948966, 0.0, -1.5707963267948966, 0.0, 0.0], a=1.3962634015954636, v=1.0471975511965976)
end
