def Fase43():
  # Global parameters:
  global speed_ms    = 0.250
  global speed_rads  = 0.750
  global accel_mss   = 1.200
  global accel_radss = 1.200
  global blend_radius_m = 0.000
  
  #--------------------------
  # Add any default subprograms here
  # For example, to drive a gripper as a program call:
  # def Gripper_Open():
  #   ...
  # end
  #
  # Example to drive a spray gun:
  def SprayOn(value):
    # use the value as an output:
    DO_SPRAY = 5
    if value == 0:
      set_standard_digital_out(DO_SPRAY, False)
    else:
      set_standard_digital_out(DO_SPRAY, True)
    end
  end

  # Example to synchronize 2
  def Synchronize():
    # Use the following digital output to signal the state of the robot:
    DO_SYNC = 1
    
    # Use the following digital input to get the state of another robot:
    DI_SYNC = 1
    
    if (get_standard_digital_out(DO_SYNC) == get_standard_digital_in(DI_SYNC)):
      set_standard_digital_out(DO_SYNC, not (get_standard_digital_out(DI_SYNC)))
      sleep(0.1)
      thread Thread_wait_1():
        while (True):
          sleep(0.01)
        end
      end
      if (get_standard_digital_out(DO_SYNC) != get_standard_digital_in(DI_SYNC)):
        global thread_handler_1=run Thread_wait_1()
        while (get_standard_digital_out(DO_SYNC) != get_standard_digital_in(DI_SYNC)):
          sync()
        end
        kill thread_handler_1
      end
    else:
      if (get_standard_digital_out(DO_SYNC) != get_standard_digital_in(DI_SYNC)):
        set_standard_digital_out(DO_SYNC, not (get_standard_digital_out(DO_SYNC)))
      end
    end
  end

  #
  # Example to move an external axis
  def MoveAxis(value):
    # use the value as an output:
    DO_AXIS_1 = 1
    DI_AXIS_1 = 1
    if value <= 0:
      set_standard_digital_out(DO_AXIS_1, False)
      
      # Wait for digital input to change state
      #while (get_standard_digital_in(DI_AXIS_1) != False):
      #  sync()
      #end
    else:
      set_standard_digital_out(DO_AXIS_1, True)
      
      # Wait for digital input to change state
      #while (get_standard_digital_in(DI_AXIS_1) != True):
      #  sync()
      #end
    end
  end
  #--------------------------
  
  
  # Main program:
  # Program generated by RoboDK v5.2.2 for UR3e on 10/11/2021 09:56:06
  # Using nominal kinematics.
  # Using Ref. Rampas: p[0.161767, -0.119777, -0.855711, -0.000000, 0.000000, 3.141593]
  # set_reference(p[0.161767, -0.119777, -0.855711, -0.000000, 0.000000, 3.141593])
  set_standard_digital_out(1, False)
  # Using TCP SAI6199-GV_E1_jt: p[0.000000, 0.000000, 0.200000, 0.000000, 0.000000, 0.000000]
  set_tcp(p[0.000000, 0.000000, 0.200000, 0.000000, 0.000000, 0.000000])
  movej([1.247684, -2.008438, -1.147372, -1.556678, 1.586913, -1.896929],1.20000,0.25000,0,0.0000)
  movel(p[0.226034, 0.341246, -0.009055, -2.207918, -2.214572, 0.011355],accel_mss,speed_ms,0,0.000)
  set_standard_digital_out(1, True)
  sleep(0.250)
  movel(p[0.227358, 0.340812, 0.077394, -2.207918, -2.214572, 0.011355],accel_mss,speed_ms,0,0.000)
  movej([-0.174802, -1.430540, -1.921014, -1.376700, 1.572940, -3.319424],1.20000,0.25000,0,0.0000)
  movel(p[0.207343, -0.172412, -0.027584, -2.208034, -2.214678, 0.011445],accel_mss,speed_ms,0,0.000)
  sleep(0.250)
  set_standard_digital_out(1, False)
  movel(p[0.208606, -0.172815, 0.055208, -2.208034, -2.214678, 0.011445],accel_mss,speed_ms,0,0.000)
  movej([0.017453, -1.553343, 0.017453, -1.553343, 0.017453, 0.017453],1.20000,0.25000,0,0.0000)
  # End of main program
end

Fase43()
