// INTERFACE ODK 1500S V2.5.1
Context=user
STEP7Prefix=ODK_AgentPLC_Real

/* 
 * Elementary Datatypes:
 *   ODK_DOUBLE      LREAL           64 bit floating point, IEEE 754
 *   ODK_FLOAT       REAL            32 bit floating point, IEEE 754
 *   ODK_INT64       LINT            64 bit signed integer
 *   ODK_INT32       DINT            32 bit signed integer
 *   ODK_INT16       INT             16 bit signed integer
 *   ODK_INT8        SINT            8 bit signed integer
 *   ODK_UINT64      ULINT           64 bit unsigned integer
 *   ODK_UINT32      UDINT           32 bit unsigned integer
 *   ODK_UINT16      UINT            16 bit unsigned integer
 *   ODK_UINT8       USINT           8 bit unsigned integer
 *   ODK_LWORD       LWORD           64 bit bitstring
 *   ODK_DWORD       DWORD           32 bit bitstring
 *   ODK_WORD        WORD            16 bit bitstring
 *   ODK_BYTE        BYTE            8 bit bitstring
 *   ODK_BOOL        BOOL            1 bit bitstring (ODK_TRUE or ODK_FALSE)
 *   ODK_LTIME       LTIME           64 bit duration in nanoseconds
 *   ODK_TIME        TIME            32 bit duration in milliseconds
 *   ODK_LDT         LDT             64 bit date and time of day in nanoseconds
 *   ODK_LTOD        LTOD            64 bit time of day in nanoseconds since midnight
 *   ODK_TOD         TOD             32 bit time of day in milliseconds since midnight
 *   ODK_CHAR        CHAR            8 bit character
 * Complex Datatypes:
 *   ODK_DTL         DTL             structure for date and time
 *   ODK_S7STRING    STRING          character string with 8 bit characters
 *   ODK_CLASSIC_DB  VARIANT         classic DB (global or based on UDT - "optimized block access" must be unchecked)
 *   []              ARRAY           field of this datatype
 * User Defined Datatype:
 *   ODK_STRUCT      UDT             user defined structure
 * Return Datatype:
 *   ODK_RESULT      0x0000...0x6FFF function succeeded (ODK_SUCCESS         = 0x0000)
 *                   0xF000...0xFFFF function failed    (ODK_USER_ERROR_BASE = 0xF000)
 */

ODK_STRUCT control_flags
{
	ODK_BOOL Control_Flag_New_Service;
	ODK_BOOL Control_Flag_Item_Completed;
	ODK_BOOL Control_Flag_Service_Completed;
};

ODK_STRUCT agent2plc
{
	ODK_UINT32 Id_Machine_Reference;
	ODK_UINT32 Id_Order_Reference;
	ODK_UINT32 Id_Batch_Reference;
	ODK_UINT32 Id_Ref_Subproduct_Type;
	ODK_UINT32 Operation_Ref_Service_Type;
	ODK_UINT8 Operation_No_of_Items;
};


ODK_STRUCT plc2agent
{
	ODK_UINT32 Id_Machine_Reference;
	ODK_UINT32 Id_Order_Reference;
	ODK_UINT32 Id_Batch_Reference;
	ODK_UINT32 Id_Ref_Subproduct_Type;
	ODK_UINT32 Id_Ref_Service_Type;
	ODK_UINT8 Id_Item_Number;
	ODK_LDT Data_Initial_Time_Stamp;
	ODK_LDT Data_Final_Time_Stamp;
	ODK_LDT Data_Service_Time_Stamp;
};

ODK_RESULT initAgent ();	//Agent Init
ODK_RESULT SampleWrite ([IN] control_flags flags, [IN] plc2agent str_out);		//Sends the Agent message   
ODK_RESULT SampleRead ( [OUT] agent2plc str_in,	[OUT] ODK_BOOL tRecv,	[OUT] ODK_BOOL tData, [INOUT] control_flags flags);	//Receive the Agent message and parses the JSON to structure
ODK_RESULT sendConf ();	//sends a confirmation message to agent
