// Generated by gencpp from file custom_messages/TransportUnitState.msg
// DO NOT EDIT!


#ifndef CUSTOM_MESSAGES_MESSAGE_TRANSPORTUNITSTATE_H
#define CUSTOM_MESSAGES_MESSAGE_TRANSPORTUNITSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <custom_messages/KobukiGeneral.h>
#include <custom_messages/KobukiObstacle.h>
#include <custom_messages/KobukiPosition.h>
#include <custom_messages/TimeDate.h>

namespace custom_messages
{
template <class ContainerAllocator>
struct TransportUnitState_
{
  typedef TransportUnitState_<ContainerAllocator> Type;

  TransportUnitState_()
    : kobuki_general()
    , kobuki_obstacle()
    , kobuki_position()
    , odroid_date()  {
    }
  TransportUnitState_(const ContainerAllocator& _alloc)
    : kobuki_general(_alloc)
    , kobuki_obstacle(_alloc)
    , kobuki_position(_alloc)
    , odroid_date(_alloc)  {
  (void)_alloc;
    }



   typedef  ::custom_messages::KobukiGeneral_<ContainerAllocator>  _kobuki_general_type;
  _kobuki_general_type kobuki_general;

   typedef  ::custom_messages::KobukiObstacle_<ContainerAllocator>  _kobuki_obstacle_type;
  _kobuki_obstacle_type kobuki_obstacle;

   typedef  ::custom_messages::KobukiPosition_<ContainerAllocator>  _kobuki_position_type;
  _kobuki_position_type kobuki_position;

   typedef  ::custom_messages::TimeDate_<ContainerAllocator>  _odroid_date_type;
  _odroid_date_type odroid_date;





  typedef boost::shared_ptr< ::custom_messages::TransportUnitState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_messages::TransportUnitState_<ContainerAllocator> const> ConstPtr;

}; // struct TransportUnitState_

typedef ::custom_messages::TransportUnitState_<std::allocator<void> > TransportUnitState;

typedef boost::shared_ptr< ::custom_messages::TransportUnitState > TransportUnitStatePtr;
typedef boost::shared_ptr< ::custom_messages::TransportUnitState const> TransportUnitStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_messages::TransportUnitState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_messages::TransportUnitState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_messages

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'custom_messages': ['/home/borjartime/rosjava_ws/src/custom_messages/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_messages::TransportUnitState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_messages::TransportUnitState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_messages::TransportUnitState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_messages::TransportUnitState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_messages::TransportUnitState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_messages::TransportUnitState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_messages::TransportUnitState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a9f169d9b464fbeb767cabba27149f7";
  }

  static const char* value(const ::custom_messages::TransportUnitState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a9f169d9b464fbeULL;
  static const uint64_t static_value2 = 0xb767cabba27149f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_messages::TransportUnitState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_messages/TransportUnitState";
  }

  static const char* value(const ::custom_messages::TransportUnitState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_messages::TransportUnitState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "KobukiGeneral kobuki_general\n\
KobukiObstacle kobuki_obstacle\n\
KobukiPosition kobuki_position\n\
TimeDate odroid_date\n\
\n\
\n\
================================================================================\n\
MSG: custom_messages/KobukiGeneral\n\
string transport_unit_name\n\
string transport_unit_state\n\
float32 battery\n\
================================================================================\n\
MSG: custom_messages/KobukiObstacle\n\
bool detected_obstacle_bumper\n\
bool detected_obstacle_camera\n\
================================================================================\n\
MSG: custom_messages/KobukiPosition\n\
bool transport_in_dock\n\
string recovery_point\n\
float64 odom_x\n\
float64 odom_y\n\
float64 rotation\n\
================================================================================\n\
MSG: custom_messages/TimeDate\n\
int32 year\n\
int32 month\n\
int32 day\n\
int32 hour\n\
int32 minute\n\
int32 seconds\n\
\n\
";
  }

  static const char* value(const ::custom_messages::TransportUnitState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_messages::TransportUnitState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.kobuki_general);
      stream.next(m.kobuki_obstacle);
      stream.next(m.kobuki_position);
      stream.next(m.odroid_date);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TransportUnitState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_messages::TransportUnitState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_messages::TransportUnitState_<ContainerAllocator>& v)
  {
    s << indent << "kobuki_general: ";
    s << std::endl;
    Printer< ::custom_messages::KobukiGeneral_<ContainerAllocator> >::stream(s, indent + "  ", v.kobuki_general);
    s << indent << "kobuki_obstacle: ";
    s << std::endl;
    Printer< ::custom_messages::KobukiObstacle_<ContainerAllocator> >::stream(s, indent + "  ", v.kobuki_obstacle);
    s << indent << "kobuki_position: ";
    s << std::endl;
    Printer< ::custom_messages::KobukiPosition_<ContainerAllocator> >::stream(s, indent + "  ", v.kobuki_position);
    s << indent << "odroid_date: ";
    s << std::endl;
    Printer< ::custom_messages::TimeDate_<ContainerAllocator> >::stream(s, indent + "  ", v.odroid_date);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MESSAGES_MESSAGE_TRANSPORTUNITSTATE_H
