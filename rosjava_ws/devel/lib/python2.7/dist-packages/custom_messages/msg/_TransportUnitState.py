# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_messages/TransportUnitState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import custom_messages.msg

class TransportUnitState(genpy.Message):
  _md5sum = "4a9f169d9b464fbeb767cabba27149f7"
  _type = "custom_messages/TransportUnitState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """KobukiGeneral kobuki_general
KobukiObstacle kobuki_obstacle
KobukiPosition kobuki_position
TimeDate odroid_date


================================================================================
MSG: custom_messages/KobukiGeneral
string transport_unit_name
string transport_unit_state
float32 battery
================================================================================
MSG: custom_messages/KobukiObstacle
bool detected_obstacle_bumper
bool detected_obstacle_camera
================================================================================
MSG: custom_messages/KobukiPosition
bool transport_in_dock
string recovery_point
float64 odom_x
float64 odom_y
float64 rotation
================================================================================
MSG: custom_messages/TimeDate
int32 year
int32 month
int32 day
int32 hour
int32 minute
int32 seconds

"""
  __slots__ = ['kobuki_general','kobuki_obstacle','kobuki_position','odroid_date']
  _slot_types = ['custom_messages/KobukiGeneral','custom_messages/KobukiObstacle','custom_messages/KobukiPosition','custom_messages/TimeDate']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       kobuki_general,kobuki_obstacle,kobuki_position,odroid_date

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TransportUnitState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.kobuki_general is None:
        self.kobuki_general = custom_messages.msg.KobukiGeneral()
      if self.kobuki_obstacle is None:
        self.kobuki_obstacle = custom_messages.msg.KobukiObstacle()
      if self.kobuki_position is None:
        self.kobuki_position = custom_messages.msg.KobukiPosition()
      if self.odroid_date is None:
        self.odroid_date = custom_messages.msg.TimeDate()
    else:
      self.kobuki_general = custom_messages.msg.KobukiGeneral()
      self.kobuki_obstacle = custom_messages.msg.KobukiObstacle()
      self.kobuki_position = custom_messages.msg.KobukiPosition()
      self.odroid_date = custom_messages.msg.TimeDate()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.kobuki_general.transport_unit_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.kobuki_general.transport_unit_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f3B().pack(_x.kobuki_general.battery, _x.kobuki_obstacle.detected_obstacle_bumper, _x.kobuki_obstacle.detected_obstacle_camera, _x.kobuki_position.transport_in_dock))
      _x = self.kobuki_position.recovery_point
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d6i().pack(_x.kobuki_position.odom_x, _x.kobuki_position.odom_y, _x.kobuki_position.rotation, _x.odroid_date.year, _x.odroid_date.month, _x.odroid_date.day, _x.odroid_date.hour, _x.odroid_date.minute, _x.odroid_date.seconds))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.kobuki_general is None:
        self.kobuki_general = custom_messages.msg.KobukiGeneral()
      if self.kobuki_obstacle is None:
        self.kobuki_obstacle = custom_messages.msg.KobukiObstacle()
      if self.kobuki_position is None:
        self.kobuki_position = custom_messages.msg.KobukiPosition()
      if self.odroid_date is None:
        self.odroid_date = custom_messages.msg.TimeDate()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kobuki_general.transport_unit_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.kobuki_general.transport_unit_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kobuki_general.transport_unit_state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.kobuki_general.transport_unit_state = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.kobuki_general.battery, _x.kobuki_obstacle.detected_obstacle_bumper, _x.kobuki_obstacle.detected_obstacle_camera, _x.kobuki_position.transport_in_dock,) = _get_struct_f3B().unpack(str[start:end])
      self.kobuki_obstacle.detected_obstacle_bumper = bool(self.kobuki_obstacle.detected_obstacle_bumper)
      self.kobuki_obstacle.detected_obstacle_camera = bool(self.kobuki_obstacle.detected_obstacle_camera)
      self.kobuki_position.transport_in_dock = bool(self.kobuki_position.transport_in_dock)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kobuki_position.recovery_point = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.kobuki_position.recovery_point = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.kobuki_position.odom_x, _x.kobuki_position.odom_y, _x.kobuki_position.rotation, _x.odroid_date.year, _x.odroid_date.month, _x.odroid_date.day, _x.odroid_date.hour, _x.odroid_date.minute, _x.odroid_date.seconds,) = _get_struct_3d6i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.kobuki_general.transport_unit_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.kobuki_general.transport_unit_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f3B().pack(_x.kobuki_general.battery, _x.kobuki_obstacle.detected_obstacle_bumper, _x.kobuki_obstacle.detected_obstacle_camera, _x.kobuki_position.transport_in_dock))
      _x = self.kobuki_position.recovery_point
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d6i().pack(_x.kobuki_position.odom_x, _x.kobuki_position.odom_y, _x.kobuki_position.rotation, _x.odroid_date.year, _x.odroid_date.month, _x.odroid_date.day, _x.odroid_date.hour, _x.odroid_date.minute, _x.odroid_date.seconds))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.kobuki_general is None:
        self.kobuki_general = custom_messages.msg.KobukiGeneral()
      if self.kobuki_obstacle is None:
        self.kobuki_obstacle = custom_messages.msg.KobukiObstacle()
      if self.kobuki_position is None:
        self.kobuki_position = custom_messages.msg.KobukiPosition()
      if self.odroid_date is None:
        self.odroid_date = custom_messages.msg.TimeDate()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kobuki_general.transport_unit_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.kobuki_general.transport_unit_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kobuki_general.transport_unit_state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.kobuki_general.transport_unit_state = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.kobuki_general.battery, _x.kobuki_obstacle.detected_obstacle_bumper, _x.kobuki_obstacle.detected_obstacle_camera, _x.kobuki_position.transport_in_dock,) = _get_struct_f3B().unpack(str[start:end])
      self.kobuki_obstacle.detected_obstacle_bumper = bool(self.kobuki_obstacle.detected_obstacle_bumper)
      self.kobuki_obstacle.detected_obstacle_camera = bool(self.kobuki_obstacle.detected_obstacle_camera)
      self.kobuki_position.transport_in_dock = bool(self.kobuki_position.transport_in_dock)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kobuki_position.recovery_point = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.kobuki_position.recovery_point = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.kobuki_position.odom_x, _x.kobuki_position.odom_y, _x.kobuki_position.rotation, _x.odroid_date.year, _x.odroid_date.month, _x.odroid_date.day, _x.odroid_date.hour, _x.odroid_date.minute, _x.odroid_date.seconds,) = _get_struct_3d6i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d6i = None
def _get_struct_3d6i():
    global _struct_3d6i
    if _struct_3d6i is None:
        _struct_3d6i = struct.Struct("<3d6i")
    return _struct_3d6i
_struct_f3B = None
def _get_struct_f3B():
    global _struct_f3B
    if _struct_f3B is None:
        _struct_f3B = struct.Struct("<f3B")
    return _struct_f3B
